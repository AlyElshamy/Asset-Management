@page
@model AssetProject.Areas.Admin.Pages.AssetManagment.IndexModel
@{
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf


<div class="slim-mainpanel">
    <div class="container">
        <div class="slim-pageheader">
            <ol class="breadcrumb slim-breadcrumb">
                <li class="breadcrumb-item"><a href="#">Home</a></li>
                <li class="breadcrumb-item"><a href="#">Assets</a></li>
                <li class="breadcrumb-item active" aria-current="page">Assets List</li>
            </ol>
            <h6 class="slim-pagetitle">Assets List</h6>
        </div><!-- slim-pageheader -->
        <div class="section-wrapper">
            <label class="section-title d-inline">Assets List</label>
            <a asp-area="Admin" asp-page="/AssetManagment/AddAsset" class="btn btn-primary" style="float:right"> Add New Asset </a>
            <p class="mg-b-20 mg-sm-b-40">Searching, ordering and paging goodness will be immediately added to the table, as shown in this example.</p>
            <div class="table-wrapper">
                <div id="datatable1_wrapper" class="dataTables_wrapper no-footer">
                    @(Html.DevExtreme().DataGrid<AssetProject.Models.Asset>()
                    .DataSource(ds => ds.RemoteController()
                    .LoadUrl(Url.Page(null, "GridData")) // access to the GridData handler defined in the OnGetGridData method in the page model
                    .Key("AssetId")
                    .OnBeforeSend("grid_dataSource_beforeSend") // passes an antiforgery token
                    )

                    .RemoteOperations(true)
                    .Editing(e => e
                    .AllowAdding(false)
                    .AllowUpdating(false)
                    .AllowDeleting(false)
                    )
                    .HeaderFilter(headerFilter => headerFilter.Visible(true))   .ColumnAutoWidth(true) .ShowBorders(true) .Paging(p=>p.PageSize(10))
                    .Pager(p=>p.ShowPageSizeSelector(true).AllowedPageSizes(new [] {10,20,40,80}))
                    .SearchPanel(s=>s.Visible(true).HighlightCaseSensitive(true))
                    .FilterRow(filterRow => filterRow
                    .Visible(true)
                    .ApplyFilter(GridApplyFilterMode.Auto)
                    )
                    .HeaderFilter(headerFilter => headerFilter.Visible(true))
                    .ColumnChooser(c => c.Enabled(true))
                    .ColumnFixing(c => c.Enabled(true))
                    .Columns(columns => {
                    columns.Add()
                    .Type(GridCommandColumnType.Buttons)
                    .Width(110)
                    .Buttons(b => {
                    b.Add().Text("View").OnClick("viewButtonClick");
                    b.Add().Text("Edit").OnClick("editButtonClick");
                    });

                    columns.AddFor(m => m.AssetId).Visible(false);
                    columns.AddFor(m => m.AssetTagId).Fixed(true).CellTemplate(@<text><a href="javascript:void(0)" onclick="ShowViewPopUp('<%- data.AssetId %>')"><%- value %></a> </text>);;
                    columns.AddFor(m=>m.AssetDescription).Fixed(true);
                    columns.AddFor(m => m.AssetCost);
                    columns.AddFor(m => m.AssetSerialNo);
                    columns.AddFor(m => m.AssetPurchaseDate);
                    columns.AddFor(m => m.ItemId).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("AssetsManagement").LoadAction("ItemsLookup").Key("Value"))
                    .ValueExpr("Value")
                    .DisplayExpr("Text")
                    );
                    columns.AddFor(m => m.Photo).Visible(false);
                    columns.AddFor(m => m.DepreciableAsset).Visible(false);
                    columns.AddFor(m => m.DepreciableCost).Visible(false);
                    columns.AddFor(m => m.SalvageValue).Visible(false);
                    columns.AddFor(m => m.AssetLife).Visible(false);
                    columns.AddFor(m => m.DateAcquired).Visible(false);
                    columns.AddFor(m => m.DepreciationMethodId).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("AssetsManagement").LoadAction("DepreciationMethodsLookup").Key("Value"))
                    .ValueExpr("Value")
                    .DisplayExpr("Text")
                    ).Visible(false);
                    })


                    )

                </div>
            </div><!-- table-wrapper -->
        </div><!-- section-wrapper -->

    </div><!-- container -->
</div>

<partial name="_AssetQuickViewPopup" />
<partial name="_AssetEditPopup" />




<script>
            function grid_dataSource_beforeSend(op, ajax) {
                    ajax.headers = {
                    RequestVerificationToken: "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken"
                };
            }
            function ShowViewPopUp(AssetId)
            {


    $.ajax({
        type: "GET",
        url: "/admin/assetmanagment/Index?handler=SingleAssetForView",
        data: { "AssetId": AssetId },
        contentType: "application/json",
        dataType: "json",
        success: function (response) {
            document.getElementById("img").src ="/"+response.Photo
            document.getElementById("AssetTagId").innerHTML = response.AssetTagId
            document.getElementById("AssetSerial").innerHTML = response.AssetSerialNo
            document.getElementById("AssetDescription").innerHTML = response.AssetDescription
            document.getElementById("AssetCost").innerHTML = response.AssetCost
            document.getElementById("AssetPurchaseDate").innerHTML = response.AssetPurchaseDate
            document.getElementById("AssetItem").innerHTML = response.Item.ItemTitle
            document.getElementById("DepreciableCost").innerHTML = response.DepreciableCost
            document.getElementById("SalvageValue").innerHTML = response.SalvageValue
            document.getElementById("AssetLife").innerHTML = response.AssetLife
            document.getElementById("DateAcquired").innerHTML = response.DateAcquired
            document.getElementById("DepreciationMethod").innerHTML = response.DepreciationMethod.DepreciationMethodTitle
             $('#AssetQuickViewPoup').modal('show');
            
        },
        failure: function (response) {
            alert(response);
        }
    });


            }


    function editButtonClick(e) {
       //alert("Come on edit")
        console.log(e.row.data);
    $.ajax({
        type: "GET",
        url: "/admin/assetmanagment/Index?handler=SingleAssetForEdit",
        data: { "AssetId": e.row.data.AssetId },
        contentType: "application/json",
        dataType: "json",
        success: function (response) {

               $('#frmEdit').dxForm('instance').option('formData',response);
                document.getElementById("AssetDescriptiontxt").innerHTML = response.AssetDescription
               $('#AssetEditPoup').modal('show');
               console.log("Elemnt"+document.getElementsByClassName("AssetClass")[0].nodeValue)
                
        },
        failure: function (response) {
            alert(response);
        }
    });





    }

     function viewButtonClick(e)
     {
       //alert("Come on View")

       console.log(e.row.data);
       document.location = '/Admin/AssetManagment/AssetProfile?AssetId=' + e.row.data.AssetId;


    }

      

</script>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />

}